# -*- coding: utf-8 -*-
"""
Created on Tue Mar 27 10:37:01 2018

@author: Mingjun
"""

import numpy as np
import pandas as pd

def discretize_ode(a1,a2,alpha,rho,kappa,x0,nosOfS,deltaS):
    # ##########The discretized Goodwin oscillator ODE ########################
    # x1 represents the concentration of mRNA for a target gene;
    # x2 reresents the corresponding protein product of the gene
    # x3,...,x_g represent intermediate protein species that facilitate 
    #    a cascade of enzymatic activation that ultimately leads to 
    #    a negative feedback, via xg, on the rate at which mRNA is transcribed.
    # Given the parameters, this function generates trajectories of x1,..x_g.
    
    ########### parameters ####################################################
    # x0: start point
    # a1, a2, alpha, rho: parameters, rho>8
    # kappa: a vector parameter; g=len(kappa)+1: number of species.
    ###########################################################################
    
    # the number of species
    g = len(x0)
    
    # represent x by using numpy array
    x = np.array(x0).flatten().reshape((1,g))
    
    # iteratively generate the states of x
    for s in range(nosOfS):
        print('number of iterations:{0}'.format(s))
        x_old = x[-1]
        x_new = x_old[0] + deltaS*(a1/(1.0+a2*np.power(x_old[-1],rho))-alpha*x_old[0])
        #print(x_new)
        for j in range(1,g):
            xj = x_old[j] + deltaS*(kappa[j-1]*x_old[j-1] - alpha*x_old[j])
            x_new = np.append(x_new,xj)
        print(x_new)
        x = np.append(x,np.array(x_new).reshape((1,g)),axis=0)
    return x

def plot_trajectory(x):
    pd.DataFrame(x).plot()

def generate_observations(x,sigma):
    # observations are generated by independent Gaussian
    # y ~ Normal(x,sigma^2)
    observation = np.random.normal(x,sigma)
    return observation
def plot_trajectory_points(x,observ):
    ax = pd.DataFrame(x).plot()
    pd.DataFrame(observ).plot(ax=ax,marker='o')
    
# model parameters
a1 = 1.0
a2 = 3.0
alpha = 0.5
rho = 10
g = 3
kappa = np.append([2.0],np.ones(g-2))
sigma = 0.1

# start point
x0 = np.zeros(g)
nosOfS = 81
deltaS = 1.0
x = discretize_ode(a1,a2,alpha,rho,kappa,x0,nosOfS,deltaS)

plot_trajectory(x)

observ = generate_observations(x,sigma)

plot_trajectory_points(x,observ[:,0:2])